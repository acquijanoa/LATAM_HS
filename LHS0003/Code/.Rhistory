{
t = seq(0,5, 0.01)
plot(t, exp(-(1/3)*t^(3/2) ),
type="l", col="red")
lines(t, exp(-(2/3)*t^(3/2) ), col = "blue")
lines(t, exp(-t), col = "green")
legend(legend = c("CVD treatment","CVD placebo","CVD, non-CVD \ntreatment and placebo"),
col = c("red","blue","green"),
lwd = 1,
x = 2.5, text.width = 2, bty = "n",
y = 0.9,cex = 0.6 )
}
{
t = seq(0,5, 0.01)
plot(t, exp(-(1/3)*t^(3/2) ),
type="l", col="red")
lines(t, exp(-(2/3)*t^(3/2) ), col = "blue")
lines(t, exp(-t), col = "green")
legend(legend = c("CVD treatment","CVD placebo","CVD, non-CVD \ntreatment and placebo"),
col = c("red","blue","green"),
lwd = 1,
x = 2.5, text.width = 2, bty = "n",
y = 0.9,cex = 0.8 )
}
{
t = seq(0,5, 0.01)
plot(t, exp(-(1/3)*t^(3/2) ),
type="l", col="red")
lines(t, exp(-(2/3)*t^(3/2) ), col = "blue")
lines(t, exp(-t), col = "green")
legend(legend = c("CVD treatment","CVD placebo","CVD, non-CVD \ntreatment and placebo"),
col = c("red","blue","green"),
lwd = 1,
x = 2.3, text.width = 2, bty = "n",
y = 0.9,cex = 0.8 )
}
{
t = seq(0,5, 0.01)
plot(t, exp(-(1/3)*t^(3/2) ),
type="l", col="red")
lines(t, exp(-(2/3)*t^(3/2) ), col = "blue")
lines(t, exp(-t), col = "green")
legend(legend = c("CVD treatment","CVD placebo","CVD, non-CVD \ntreatment and placebo"),
col = c("red","blue","green"),
lwd = 1,
x = 2.3, text.width = 2, bty = "n",
y = 1.05,cex = 0.8 )
}
{
t = seq(0,5, 0.01)
plot(t, exp(-(1/3)*t^(3/2) ),
type="l", col="red")
lines(t, exp(-(2/3)*t^(3/2) ), col = "blue")
lines(t, exp(-t), col = "green")
legend(legend = c("CVD treatment","CVD placebo","Non-CVD treatment \n and placebo"),
col = c("red","blue","green"),
lwd = 1,
x = 2.3, text.width = 2, bty = "n",
y = 1.05,cex = 0.8 )
}
{
t = seq(0,5, 0.01)
plot(t, exp(-(1/3)*t^(3/2) ),
type="l", col="red", xlab ="time", ylab="Survival")
lines(t, exp(-(2/3)*t^(3/2) ), col = "blue")
lines(t, exp(-t), col = "green")
legend(legend = c("CVD treatment","CVD placebo","Non-CVD treatment \n and placebo"),
col = c("red","blue","green"),
lwd = 1,
x = 2.3, text.width = 2, bty = "n",
y = 1.05,cex = 0.8)
}
{
t = seq(0,5, 0.01)
plot(t, exp(-(1/3)*t^(3/2) ),
type="l", col="red", xlab ="time", ylab="Survival")
lines(t, exp(-(2/3)*t^(3/2) ), col = "blue")
lines(t, exp(-t), col = "green")
legend(legend = c("CVD treatment","CVD placebo","Non-CVD treatment \n and placebo"),
col = c("red","blue","green"),
lwd = 1,
x = 2.3, text.width = 2, bty = "n",
y = 1.05, cex = 0.8, pch = 0.6)
}
{
t = seq(0,5, 0.01)
plot(t, exp(-(1/3)*t^(3/2) ),
type="l", col="red", xlab ="time", ylab="Survival")
lines(t, exp(-(2/3)*t^(3/2) ), col = "blue")
lines(t, exp(-t), col = "green")
legend(legend = c("CVD treatment","CVD placebo","Non-CVD treatment \n and placebo"),
col = c("red","blue","green"),
lwd = 1,
x = 2.3, text.width = 2, bty = "n",
y = 1.05, cex = 0.8, )
}
r1 = runif(1000)
u1 = runif(1000)
(-3*log(u1))^(2/3)
t1 = (-3*log(u1))^(2/3)
u2 = runif(1000)
u1_ = runif(1000)
u1 = runif(1000)
u1_ = runif(1000)
t1 = (-3*log(u1))^(2/3)
t1_= (-(3/2)*log(u1))^(2/3)
plot(t1)
c = unif(0,5)
c = runif(2000, min = 0, max = 5)
c
set.seed(123)
u1 = runif(1000)
u1_ = runif(1000)
t1 = (-3*log(u1))^(2/3)
t1_= (-(3/2)*log(u1))^(2/3)
c = runif(2000, min = 0, max = 5)
Z = c(rep(0,1000),rep(1,1000))
Z
cvd_time = function(z,u){
if (z==0){ # placebo
return( (-3*log(u))^(2/3) )
}
else if(z==1){ # treatment
return( (-(3/2)*log(u))^(2/3) )
}
}
Z = c(rep(0,1000),rep(1,1000))
Z
C
C = runif(2000, min = 0, max = 5)
C
non_cvd_time = function(u){
-1*log(1-u)
}
U = c(runif(1000),runif(1000))
U1 = c(runif(1000),runif(1000))
U1 = c(runif(1000),runif(1000))
U2 = c(runif(1000),runif(1000))
cvd_time = function(z,u){
if (z==0){ # placebo
return( (-3*log(u))^(2/3) )
}
else if(z==1){ # treatment
return( (-(3/2)*log(u))^(2/3) )
}
}
non_cvd_time = function(u){
-1*log(1-u)
}
T1 = cvd_time(Z,U)
U1
T1 = apply(cvd_time, Z,U)
T1 = lapply(cvd_time, Z, U)
T1 = lapply(FUN = cvd_time, Z, U)
T1
noncvd_time = function(u){
-1*log(1-u)
}
T2 = lapply(FUN = noncvd_time, Z, U)
T1 = lapply(FUN = cvd_time, Z, U1)
T2 = lapply(FUN = noncvd_time, Z, U2)
noncvd_time = function(u){
return(-1*log(1-u))
}
T2 = lapply(FUN = noncvd_time, U2)
T1
T2
T2 =noncvd_time(U2)
T2
Z = c(rep(0,1000),rep(1,1000)) # indicator of treatment
T1 = lapply(FUN = cvd_time, Z, U1) # Time due to cause 1
T2 =noncvd_time(U2). # Time due to cause 2
C = runif(2000, min = 0, max = 5) # Censoring time
noncvd_time = function(u){
return(-1*log(1-u))
}
T2 =noncvd_time(U2). # Time due to cause 2
T2 =noncvd_time(U2) # Time due to cause 2
Z = c(rep(0,1000),rep(1,1000)) # indicator of treatment
T1 = lapply(FUN = cvd_time, Z, U1) # Time due to cause 1
T2 =noncvd_time(U2) # Time due to cause 2
C = runif(2000, min = 0, max = 5) # Censoring time
set.seed(123)
U1 = c(runif(1000),runif(1000))
U2 = c(runif(1000),runif(1000))
Z = c(rep(0,1000),rep(1,1000)) # indicator of treatment
T1 = lapply(FUN = cvd_time, Z, U1) # Time due to cause 1
T2 =noncvd_time(U2) # Time due to cause 2
C = runif(2000, min = 0, max = 5) # Censoring time
X = min(T1,T2,C)
C
T2
T1
cvd_time(Z,U1)
Z
T1 = mapply(cvd_time,Z,U1) # Time due to cause 1
T1
set.seed(123)
U1 = c(runif(1000),runif(1000))
U2 = c(runif(1000),runif(1000))
cvd_time = function(z,u){
if (z==0){ # placebo
return( (-3*log(u))^(2/3) )
}
else if(z==1){ # treatment
return( (-(3/2)*log(u))^(2/3) )
}
}
noncvd_time = function(u){
return(-1*log(1-u))
}
Z = c(rep(0,1000),rep(1,1000)) # indicator of treatment
T1 = mapply(cvd_time,Z,U1) # Time due to cause 1
T2 =noncvd_time(U2) # Time due to cause 2
C = runif(2000, min = 0, max = 5) # Censoring time
X = min(T1,T2,C)
X
X = mapply(min,T1,T2,C)
X
min(T1,T2)
mapply(min,T1,T2)
if(C<mapply(min,T1,T2)) delta = 0
C<mapply(min,T1,T2)
delta = as.numeric(C<mapply(min,T1,T2))
delta
data = data.frame(i = 1:2000,Z,X,delta)
data %>% head()
library(dplyr)
data %>% head()
data = data.frame(i = 1:2000,Z,X,T1,T2,C,delta)
data %>% head()
data = data.frame(i = 1:2000,Z,X,T1,T2,`min(T1,T2)` = mapply(min,T1,T2,C),C,delta)
data %>% head()
data = data.frame(i = 1:2000,Z,X,T1,T2,`min(T1,T2)` = mapply(min,T1,T2),C,delta)
data %>% head()
delta = as.numeric(C>=mapply(min,T1,T2))
data = data.frame(i = 1:2000,Z,X,T1,T2,`min(T1,T2)` = mapply(min,T1,T2),C,delta)
data %>% head()
library(dplyr)
library(ggplot2)
library(readr)
library(magrittr)
data <- readr::read_csv("NYC_Dog_Licensing_Dataset.csv")
dim(data)
data %>% head()
data %>% filter(AnimalName == "SMARCK")
data %>% filter(is.na(AnimalBirthYear))
data <- readr::read_csv("NYC_Dog_Licensing_Dataset.csv")
data %<>% rename(name=AnimalName,
gender=AnimalGender,
birth_year=AnimalBirthYear,
breed=BreedName,
zipcode=ZipCode,
issue_date=LicenseIssuedDate,
expiration_date=LicenseExpiredDate,
extract_year = `Extract Year`)
cat("The number of rows after excluding complete cases is:\n",
data_complete %>% tally() %>% pull(n))
data_complete <- data[complete.cases(data),]
cat("The number of rows before excluding complete cases is:\n",
data %>% tally() %>% pull(n))
cat("The number of rows after excluding complete cases is:\n",
data_complete %>% tally() %>% pull(n))
cat("The total number of rows is:\n",
data_complete %>% tally() %>% pull(n))
cat("The number of distinct rows is:\n",
data_complete %>% distinct() %>% tally() %>% pull(n))
data_complete %>%
group_by_all() %>%
tally() %>% filter(n>1) %>% arrange(-n) %>% data.table::data.table()
ggplot(data_complete %>% group_by(birth_year) %>% tally(),
aes(x = birth_year, y = n)) +
geom_bar(stat = "identity", fill="lightblue") +
theme_bw() +
labs(title="Number of dogs by year of birth",
x="Year",
y="Frequency")
ggplot(data_complete %>%
group_by(birth_year) %>%
tally() %>% filter(birth_year >= 1998),
aes(x = birth_year, y = n)) +
geom_bar(stat = "identity", fill="lightblue") +
theme_bw() +
labs(title="Number of dogs by year of birth, 1998-2024",
x="Year",
y="Frequency")
data_filtered <- data_complete %>% select(name,gender,birth_year,breed,zipcode) %>% distinct() %>%
filter(!(name %in% c("NAME NOT PROVIDED","UNKNOWN","NAME"," ",".","NONE")))
cat("The number of rows before the assumption is:\n",data_complete %>% summarise(n=n()) %>% pull(n))
cat("The number of rows after the assumption is:\n",data_filtered %>% summarise(n=n()) %>% pull(n))
## Creating the count of dogs by year of birth
dogs_count <- data_filtered %>%
group_by(birth_year) %>%
tally() %>% rename(n_year=n)
# Creating the count of dogs by name and year of birth and merging it with dogs count
dogs_count_merged = data_filtered %>%
group_by(name, birth_year) %>%
tally() %>%
left_join(dogs_count, by = 'birth_year') %>%
mutate(rate=n/n_year)
max_rate_1999 = dogs_count_merged %>% filter(birth_year == 1999) %>% .$rate %>% max()
max_rate_2023 = dogs_count_merged %>% filter(birth_year == 2023) %>% .$rate %>% max()
cat("The most popular names in 1999 is:", dogs_count_merged %>%
filter(birth_year == 1999 & rate == max_rate_1999) %>% pull(name))
cat("The most popular names in 2023 is:", dogs_count_merged %>%
filter(birth_year == 2023 & rate == max_rate_2023) %>% pull(name))
ggplot(dogs_count_merged %>%
filter(name %in% c("MAX","BUDDY","LUNA")) %>%
mutate(rate= 100*rate),
mapping=aes(x=birth_year,
y=rate,
group=name,
color=name)) +
geom_line(size=1.1) +
theme_bw() +
labs(title="Trend of the most popular dog names in NY",
x = "Year",
y="Percent (%)",
color="Name")
cat("The total number of rows is:\n",
data_complete %>% tally() %>% pull(n))
cat("The number of distinct rows is:\n",
data_complete %>% distinct() %>% tally() %>% pull(n))
cat("The total number of rows is:\n",
data_complete %>% tally() %>% pull(n))
cat("The number of distinct rows is:\n",
data_complete %>% distinct() %>% tally() %>% pull(n))
data_complete <- data %>% filter(complete.cases(.))
cat("The number of rows before excluding complete cases is:\n",
data %>% tally() %>% pull(n))
cat("The number of rows after excluding complete cases is:\n",
data_complete %>% tally() %>% pull(n))
cat("The total number of rows is:\n",
data_complete %>% tally() %>% pull(n))
cat("The number of distinct rows is:\n",
data_complete %>% distinct() %>% tally() %>% pull(n))
data_complete %>% group_by(all) %>%  tally() %>% pull(n))
data_complete %>% group_by(all) %>%  tally() %>% pull(n)
data_complete %>% group_by_all()) %>%  tally() %>% pull(n)
data_complete %>% group_by_all() %>%  tally() %>% pull(n)
# Creating the count of dogs by name and year of birth and merging it with dogs count
dogs_count_merged = data_filtered %>%
group_by(name, birth_year) %>%
tally() %>%
left_join(dogs_count, by = 'birth_year') %>%
mutate(rate=n/n_year)
cat("The most popular names in 1999 is:", dogs_count_merged %>%
filter(birth_year == 1999 & rate == max_rate_1999) %>% pull(name))
# Creating the count of dogs by name and year of birth and merging it with dogs count
dogs_count_merged = data_filtered %>%
group_by(name, birth_year) %>%
tally() %>%
left_join(dogs_count, by = 'birth_year') %>%
mutate(rate=n/n_year)
data_filtered <- data_complete %>% select(name,gender,birth_year,breed,zipcode) %>% distinct() %>%
filter(!(name %in% c("NAME NOT PROVIDED","UNKNOWN","NAME"," ",".","NONE")))
cat("The number of rows before the assumption is:\n",data_complete %>% summarise(n=n()) %>% pull(n))
cat("The number of rows after the assumption is:\n",data_filtered %>% summarise(n=n()) %>% pull(n))
## Creating the count of dogs by year of birth
dogs_count <- data_filtered %>%
group_by(birth_year) %>%
tally() %>% rename(n_year=n)
# Creating the count of dogs by name and year of birth and merging it with dogs count
dogs_count_merged = data_filtered %>%
group_by(name, birth_year) %>%
tally() %>%
left_join(dogs_count, by = 'birth_year') %>%
mutate(rate=n/n_year)
max_rate_1999 = dogs_count_merged %>% filter(birth_year == 1999) %>% .$rate %>% max()
max_rate_2023 = dogs_count_merged %>% filter(birth_year == 2023) %>% .$rate %>% max()
cat("The most popular names in 1999 is:", dogs_count_merged %>%
filter(birth_year == 1999 & rate == max_rate_1999) %>% pull(name))
cat("The most popular names in 2023 is:", dogs_count_merged %>%
filter(birth_year == 2023 & rate == max_rate_2023) %>% pull(name))
ggplot(dogs_count_merged %>%
filter(name %in% c("MAX","BUDDY","LUNA")) %>%
mutate(rate= 100*rate),
mapping=aes(x=birth_year,
y=rate,
group=name,
color=name)) +
geom_line(size=1.1) +
theme_bw() +
labs(title="Trend of the most popular dog names in NY",
x = "Year",
y="Percent (%)",
color="Name")
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~REGION + WOMEN_AGE_C6 + URBAN  + factor(WOMEN_EDUCATION_C3), design = hond_design_sub,
family = quasibinomial(link="log"))
## loading the data
load("../Data/LHS000301.Rdata")
setwd("~/Documentos/Research/LATAM_HS/LHS0003/Code")
## loading the data
load("../Data/LHS000301.Rdata")
## We create the design
hond_design = survey::svydesign(ids=~PSU,
strata=~stratum,
weights=~wmweight,
data = LHS000301)
### Creating a subset of observations
hond_design_sub = subset(hond_design, DOMAIN==1)
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~REGION + WOMEN_AGE_C6 + URBAN  + factor(WOMEN_EDUCATION_C3), design = hond_design_sub,
family = quasibinomial(link="log"))
library(haven)
library(dplyr)
library(magrittr)
library(survey)
library(ggplot2)
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~REGION + WOMEN_AGE_C6 + URBAN  + factor(WOMEN_EDUCATION_C3), design = hond_design_sub,
family = quasibinomial(link="log"))
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~REGION + WOMEN_AGE_C6 + URBAN, design = hond_design_sub,
family = quasibinomial(link="log"))
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + WOMEN_AGE_C6 + URBAN, design = hond_design_sub,
family = quasibinomial(link="log"))
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + WOMEN_AGE_C6 + URBAN, design = hond_design_sub,
family = quasibinomial(link="logit"))
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + WOMEN_AGE_C6 + URBAN, design = hond_design_sub,
family = quasibinomial(link="logit"))
mod_education2 = svyglm(formula =  OVERWEIGHT ~ REGION + WOMEN_AGE_C6 + URBAN, design = hond_design_sub,
family = quasibinomial(link="log"), start = mod_education$coefficients )
mod_education$coefficients
mod_education2 = svyglm(formula =  OVERWEIGHT ~ REGION + WOMEN_AGE_C6 + URBAN, design = hond_design_sub,
family = quasibinomial(link="log"), start = mod_education$coefficients )
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + WOMEN_AGE_C6 + URBAN,
design = hond_design_sub,
family = quasibinomial(link="logit"))
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + WOMEN_AGE_C6 + URBAN,
design = hond_design_sub,
family = quasibinomial(link="logit"))
predict(mod_education)
predict(mod_education, type = "link")
predict(mod_education, type = "response")
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + WOMEN_AGE_C6 + URBAN,
design = hond_design_sub,
family = quasibinomial(link="log"))
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + WOMEN_AGE_C6 + URBAN,
design = hond_design_sub,
family = binomial(link="log"))
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + WOMEN_AGE_C6 + URBAN,
design = hond_design_sub,
family = quasibinomial(link="logit") )
exp(mod_education$coefficients)
length(mod_education$coefficients)
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + WOMEN_AGE_C6 + URBAN,
design = hond_design_sub,
family = quasibinomial(link="logit"), start=rep(0,26))
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + WOMEN_AGE_C6 + URBAN,
design = hond_design_sub,
family = quasibinomial(link="log"), start=rep(0,26))
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + WOMEN_AGE_C6 + URBAN,
design = hond_design_sub,
family = quasibinomial(link="log"), start=rep(1,26))
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + WOMEN_AGE_C6 + URBAN,
design = hond_design_sub,
family = quasibinomial(link="log"), start=rep(2,26))
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + WOMEN_AGE_C6 + URBAN,
design = hond_design_sub,
family = quasibinomial(link="log"), start=rep(0.001,26))
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + WOMEN_AGE_C6,
design = hond_design_sub,
family = quasibinomial(link="log"))
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + URBAN,
design = hond_design_sub,
family = quasibinomial(link="log"))
summary(mod_education)
summary(mod_education)
exp(mod_education$coefficients)
predict(mod_education, type = "response")
pred = LHS000301 %>% filter(DOMAIN==1) %>% mutate(pred = predict(mod_education, type = "response"))
pred
pred = LHS000301 %>% filter(DOMAIN==1) %>%
mutate(pred = predict(mod_education, type = "response")) %>%
select(REGION,URBAN,pred)
pred = LHS000301 %>% filter(DOMAIN==1) %>%
mutate(pred = predict(mod_education, type = "response")) %>%
select(REGION,URBAN,pred) %>% distinct()
pred
pred.db = LHS000301 %>% filter(DOMAIN==1) %>%
mutate(pred = predict(mod_education, type = "response")) %>%
select(REGION,URBAN,pred) %>% distinct()
pred.db %>% View()
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + URBAN + WOMEN_EDUCATION_C3,
design = hond_design_sub,
family = quasibinomial(link="log"))
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + URBAN + WOMEN_EDUCATION_C3,
design = hond_design_sub,
family = quasibinomial(link="log"))
### Model with all the variables
mod_education = svyglm(formula =  OVERWEIGHT ~ REGION + URBAN,
design = hond_design_sub,
family = quasibinomial(link="log"))
